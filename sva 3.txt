#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_SIZE 10000000  // Maksimalan broj elemenata

// Generiranje polja s slučajnim brojevima u rasponu [dg, gg]
void gen_arr(float V[], int n, float dg, float gg) {
    for (int i = 0; i < n; i++) {
        V[i] = dg + (gg - dg) * ((float)rand() / RAND_MAX);
    }
}

// A) Sekvencijalno pretraživanje (O(n))
int sekv_pret(float V[], int n, float x) {
    for (int i = 0; i < n; i++) {
        if (V[i] == x) return i;
    }
    return -1;
}

// B) Sortiranje (Bubble Sort) (O(n^2), ali jednostavno za implementaciju)
void sort(float V[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (V[j] > V[j + 1]) {
                float temp = V[j];
                V[j] = V[j + 1];
                V[j + 1] = temp;
            }
        }
    }
}

// C) Binarno pretraživanje (O(log n))
int bin_pret(float V[], int n, float x) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (V[mid] == x) return mid;
        if (V[mid] < x) low = mid + 1;
        else high = mid - 1;
    }
    return -1;
}

int main() {
    srand((unsigned int)time(NULL));
    int n, izbor;
    float dg, gg, x;
    static float V[MAX_SIZE];  // Statičko polje za optimizaciju memorije

    // Unos podataka
    printf("Broj elemenata (do %d): ", MAX_SIZE);
    scanf("%d", &n);
    if (n > MAX_SIZE) {
        printf("Prekoracenje velicine niza!\n");
        return 1;
    }

    printf("Donja i gornja granica: ");
    scanf("%f %f", &dg, &gg);
    printf("Broj za pretragu: ");
    scanf("%f", &x);
    printf("Odaberite opciju:\n1. Sekvencijalno pretrazivanje\n2. Sortiranje\n3. Binarno pretrazivanje\n");
    scanf("%d", &izbor);

    // Generiranje niza
    gen_arr(V, n, dg, gg);

    // Mjerenje vremena
    clock_t t1 = clock();

    if (izbor == 1) {
        // Sekvencijalno pretraživanje
        int indeks = sekv_pret(V, n, x);
        clock_t t2 = clock();
        if (indeks != -1) printf("Pronaden na indeksu %d\n", indeks);
        else printf("Nije pronaden\n");
        printf("Vrijeme trajanja sekvencijalnog pretrazivanja: %.2f ms\n", (double)(t2 - t1) * 1000 / CLOCKS_PER_SEC);
    } else if (izbor == 2) {
        // Sortiranje
        sort(V, n);
        clock_t t2 = clock();
        printf("Sortiranje zavrseno!\n");
        printf("Vrijeme trajanja sortiranja: %.2f ms\n", (double)(t2 - t1) * 1000 / CLOCKS_PER_SEC);
    } else if (izbor == 3) {
        // Binarno pretraživanje
        sort(V, n);  // Prvo sortiramo niz
        int indeks = bin_pret(V, n, x);
        clock_t t2 = clock();
        if (indeks != -1) printf("Pronaden na indeksu %d\n", indeks);
        else printf("Nije pronaden\n");
        printf("Vrijeme trajanja binarnog pretrazivanja (ukljucujuci sortiranje): %.2f ms\n", (double)(t2 - t1) * 1000 / CLOCKS_PER_SEC);
    } else {
        printf("Neispravan izbor!\n");
    }

    return 0;
}
